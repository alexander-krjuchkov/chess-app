on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  node_version: 22.12.0

jobs:
  run_tests:
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4.2.2

    - name: Set up Node.js ${{ env.node_version }}
      uses: actions/setup-node@v4.1.0
      with:
        node-version: ${{ env.node_version }}

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm i

    - name: Execute unit tests
      working-directory: ./backend
      run: npm run test

    - name: Execute end-to-end tests
      working-directory: ./backend
      run: npm run test:e2e

  run_build:
    needs: run_tests
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.2.2

    - name: Create .env file for backend image build
      run: |
        touch .env
        echo "CONTAINER_REGISTRY_HOST=${{ vars.CONTAINER_REGISTRY_HOST }}" >> .env
        echo "BACKEND_IMAGE=${{ vars.BACKEND_IMAGE }}" >> .env
        echo "FRONTEND_IMAGE=${{ vars.FRONTEND_IMAGE }}" >> .env
        echo "DOMAIN=${{ vars.DOMAIN }}" >> .env

    - name: Build docker images
      run: |
        docker compose -f docker-compose.prod.yml build

    - name: Log in to docker registry
      uses: docker/login-action@v3.3.0
      with:
        registry: ${{ vars.CONTAINER_REGISTRY_HOST }}
        username: ${{ vars.CONTAINER_REGISTRY_USERNAME }}
        password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

    - name: Push images to container registry
      run: |
        docker compose -f docker-compose.prod.yml push

  run_deploy:
    needs: run_build
    runs-on: ubuntu-24.04
    env:
      IP: ${{ secrets.SSH_IP }}
      USER: ${{ secrets.SSH_USER }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.2.2

    - name: Configure SSH access
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_ed25519.pub
        chmod 600 ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519.pub
        ssh-keyscan -H ${{ secrets.SSH_IP }} >> ~/.ssh/known_hosts

    - name: Create .env file for remote server
      run: |
        touch .env
        echo "CONTAINER_REGISTRY_HOST=${{ vars.CONTAINER_REGISTRY_HOST }}" >> .env
        echo "BACKEND_IMAGE=${{ vars.BACKEND_IMAGE }}" >> .env
        echo "FRONTEND_IMAGE=${{ vars.FRONTEND_IMAGE }}" >> .env
        echo "DOMAIN=${{ vars.DOMAIN }}" >> .env

    - name: Copy .env file to remote server
      run: |
        ssh "$USER@$IP" "mkdir -p /app"
        scp ./.env "$USER@$IP":/app

    - name: Deploy application on remote server
      env:
        CONTAINER_REGISTRY: ${{ vars.CONTAINER_REGISTRY_HOST }}
        REGISTRY_USER: ${{ vars.CONTAINER_REGISTRY_USERNAME }}
        REGISTRY_PASSWORD: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
      run: |
        ssh "$USER@$IP" "
          cd /app
          docker ps -q | xargs --no-run-if-empty docker stop
          docker system prune --force
          docker login -u $REGISTRY_USER -p '$REGISTRY_PASSWORD' $CONTAINER_REGISTRY
          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml up -d --no-build
        "
